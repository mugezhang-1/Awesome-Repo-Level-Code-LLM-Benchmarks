name: ci

on:
  push:
    branches: [ main ]
  pull_request:

permissions:
  contents: write   # allow README commits from the workflow

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - name: Check out
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r requirements.txt

      - name: Schema validate benchmarks.json
        run: python scripts/validate.py

  render:
    runs-on: ubuntu-latest
    needs: validate
    steps:
      - name: Check out (with token)
        uses: actions/checkout@v4
        with:
          persist-credentials: true   # use default GITHUB_TOKEN

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r requirements.txt

      - name: Build list from data/benchmarks.json
        run: |
          set -euxo pipefail
          python scripts/build_readme.py > _list.md
          echo "----- _list.md (first 20 lines) -----"
          head -n 20 _list.md || true
          echo "----- end preview -----"
          test -s _list.md || (echo "ERROR: _list.md is empty" && exit 1)

      - name: Inject list into README (safe lambda; verbose)
        run: |
          set -e
          python - <<'PY'
          import re, pathlib, sys
          rd = pathlib.Path("README.md")
          if not rd.exists():
              print("ERROR: README.md not found", file=sys.stderr); sys.exit(1)
          text = rd.read_text(encoding="utf-8")
          start, end = "<!-- START:LIST -->", "<!-- END:LIST -->"
          if start not in text or end not in text:
              print("ERROR: Markers not found in README.md", file=sys.stderr); sys.exit(1)
          new = pathlib.Path("_list.md").read_text(encoding="utf-8").strip()
          print("INFO: Injecting", len(new.splitlines()), "lines between markers.")
          updated = re.sub(
              r"(<!-- START:LIST -->)(.*?)(<!-- END:LIST -->)",
              lambda m: m.group(1) + "\n" + new + "\n" + m.group(3),
              text, flags=re.S
          )
          # Clean up any previous literal \1 or \3 artifacts
          updated = updated.replace("\\1", "").replace("\\3", "")
          if updated == text:
              print("INFO: README content unchanged.")
          rd.write_text(updated, encoding="utf-8")
          PY
          echo "----- README diff -----"
          git --no-pager diff README.md || true
          echo "----- end diff -----"

      - name: Commit README (only on push; only if changed)
        if: github.event_name == 'push'
        run: |
          set -euxo pipefail
          git config --global --add safe.directory "$GITHUB_WORKSPACE"
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          if git diff --quiet README.md; then
            echo "No changes to commit."
          else
            git add README.md
            git commit -m "chore: auto-render list from benchmarks.json"
            git push
          fi
